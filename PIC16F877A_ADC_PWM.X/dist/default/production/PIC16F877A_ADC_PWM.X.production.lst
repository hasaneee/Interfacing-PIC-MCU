

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Mon Dec 14 19:31:48 2020

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    14                           	dabs	1,0x7E,2
    15  0000                     
    16                           ; Version 2.20
    17                           ; Generated 12/02/2020 GMT
    18                           ; 
    19                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    20                           ; All rights reserved.
    21                           ; 
    22                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    23                           ; 
    24                           ; Redistribution and use in source and binary forms, with or without modification, are
    25                           ; permitted provided that the following conditions are met:
    26                           ; 
    27                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    28                           ;        conditions and the following disclaimer.
    29                           ; 
    30                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    31                           ;        of conditions and the following disclaimer in the documentation and/or other
    32                           ;        materials provided with the distribution.
    33                           ; 
    34                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    35                           ;        software without specific prior written permission.
    36                           ; 
    37                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    38                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    39                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    40                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    41                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    42                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    43                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    44                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    45                           ; 
    46                           ; 
    47                           ; Code-generator required, PIC16F877A Definitions
    48                           ; 
    49                           ; SFR Addresses
    50  0000                     	;# 
    51  0001                     	;# 
    52  0002                     	;# 
    53  0003                     	;# 
    54  0004                     	;# 
    55  0005                     	;# 
    56  0006                     	;# 
    57  0007                     	;# 
    58  0008                     	;# 
    59  0009                     	;# 
    60  000A                     	;# 
    61  000B                     	;# 
    62  000C                     	;# 
    63  000D                     	;# 
    64  000E                     	;# 
    65  000E                     	;# 
    66  000F                     	;# 
    67  0010                     	;# 
    68  0011                     	;# 
    69  0012                     	;# 
    70  0013                     	;# 
    71  0014                     	;# 
    72  0015                     	;# 
    73  0015                     	;# 
    74  0016                     	;# 
    75  0017                     	;# 
    76  0018                     	;# 
    77  0019                     	;# 
    78  001A                     	;# 
    79  001B                     	;# 
    80  001B                     	;# 
    81  001C                     	;# 
    82  001D                     	;# 
    83  001E                     	;# 
    84  001F                     	;# 
    85  0081                     	;# 
    86  0085                     	;# 
    87  0086                     	;# 
    88  0087                     	;# 
    89  0088                     	;# 
    90  0089                     	;# 
    91  008C                     	;# 
    92  008D                     	;# 
    93  008E                     	;# 
    94  0091                     	;# 
    95  0092                     	;# 
    96  0093                     	;# 
    97  0094                     	;# 
    98  0098                     	;# 
    99  0099                     	;# 
   100  009C                     	;# 
   101  009D                     	;# 
   102  009E                     	;# 
   103  009F                     	;# 
   104  010C                     	;# 
   105  010D                     	;# 
   106  010E                     	;# 
   107  010F                     	;# 
   108  018C                     	;# 
   109  018D                     	;# 
   110  0000                     	;# 
   111  0001                     	;# 
   112  0002                     	;# 
   113  0003                     	;# 
   114  0004                     	;# 
   115  0005                     	;# 
   116  0006                     	;# 
   117  0007                     	;# 
   118  0008                     	;# 
   119  0009                     	;# 
   120  000A                     	;# 
   121  000B                     	;# 
   122  000C                     	;# 
   123  000D                     	;# 
   124  000E                     	;# 
   125  000E                     	;# 
   126  000F                     	;# 
   127  0010                     	;# 
   128  0011                     	;# 
   129  0012                     	;# 
   130  0013                     	;# 
   131  0014                     	;# 
   132  0015                     	;# 
   133  0015                     	;# 
   134  0016                     	;# 
   135  0017                     	;# 
   136  0018                     	;# 
   137  0019                     	;# 
   138  001A                     	;# 
   139  001B                     	;# 
   140  001B                     	;# 
   141  001C                     	;# 
   142  001D                     	;# 
   143  001E                     	;# 
   144  001F                     	;# 
   145  0081                     	;# 
   146  0085                     	;# 
   147  0086                     	;# 
   148  0087                     	;# 
   149  0088                     	;# 
   150  0089                     	;# 
   151  008C                     	;# 
   152  008D                     	;# 
   153  008E                     	;# 
   154  0091                     	;# 
   155  0092                     	;# 
   156  0093                     	;# 
   157  0094                     	;# 
   158  0098                     	;# 
   159  0099                     	;# 
   160  009C                     	;# 
   161  009D                     	;# 
   162  009E                     	;# 
   163  009F                     	;# 
   164  010C                     	;# 
   165  010D                     	;# 
   166  010E                     	;# 
   167  010F                     	;# 
   168  018C                     	;# 
   169  018D                     	;# 
   170                           
   171                           	psect	idataCOMMON
   172  076F                     __pidataCOMMON:
   173                           
   174                           ;initializer for _PWM_freq
   175  076F  3488               	retlw	136
   176  0770  3413               	retlw	19
   177  001E                     _ADRESH	set	30
   178  001F                     _ADCON0	set	31
   179  0017                     _CCP1CON	set	23
   180  0015                     _CCPR1L	set	21
   181  0012                     _T2CON	set	18
   182  00FA                     _GO_nDONE	set	250
   183  00BA                     _CCP1M2	set	186
   184  00BB                     _CCP1M3	set	187
   185  009E                     _ADRESL	set	158
   186  009F                     _ADCON1	set	159
   187  0087                     _TRISCbits	set	135
   188  0092                     _PR2	set	146
   189                           
   190                           	psect	cinit
   191  07F0                     start_initialization:	
   192                           ; #config settings
   193                           
   194  07F0                     __initialization:
   195                           
   196                           ; Initialize objects allocated to COMMON
   197  07F0  120A  118A  276F  120A  118A  	fcall	__pidataCOMMON	;fetch initializer
   198  07F5  00F7               	movwf	__pdataCOMMON& (0+127)
   199  07F6  120A  118A  2770  120A  118A  	fcall	__pidataCOMMON+1	;fetch initializer
   200  07FB  00F8               	movwf	(__pdataCOMMON+1)& (0+127)
   201  07FC                     end_of_initialization:	
   202                           ;End of C runtime variable initialization code
   203                           
   204  07FC                     __end_of__initialization:
   205  07FC  0183               	clrf	3
   206  07FD  120A  118A  2FA4   	ljmp	_main	;jump to C main() function
   207                           
   208                           	psect	dataCOMMON
   209  0077                     __pdataCOMMON:
   210  0077                     _PWM_freq:
   211  0077                     	ds	2
   212                           
   213                           	psect	cstackCOMMON
   214  0070                     __pcstackCOMMON:
   215  0070                     ?_PWM_Initialize:
   216  0070                     ??_PWM_Initialize:	
   217                           ; 1 bytes @ 0x0
   218                           
   219  0070                     ?_PWM2_LoadDutyValue:	
   220                           ; 1 bytes @ 0x0
   221                           
   222  0070                     ?_adc_init:	
   223                           ; 1 bytes @ 0x0
   224                           
   225  0070                     ??_adc_init:	
   226                           ; 1 bytes @ 0x0
   227                           
   228  0070                     ?_main:	
   229                           ; 1 bytes @ 0x0
   230                           
   231  0070                     ?_read_adc:	
   232                           ; 1 bytes @ 0x0
   233                           
   234  0070                     PWM2_LoadDutyValue@dutyValue:	
   235                           ; 2 bytes @ 0x0
   236                           
   237                           
   238                           ; 2 bytes @ 0x0
   239  0070                     	ds	2
   240  0072                     ??_PWM2_LoadDutyValue:
   241  0072                     ??_read_adc:	
   242                           ; 1 bytes @ 0x2
   243                           
   244                           
   245                           ; 1 bytes @ 0x2
   246  0072                     	ds	2
   247  0074                     read_adc@ch:
   248                           
   249                           ; 1 bytes @ 0x4
   250  0074                     	ds	1
   251  0075                     ??_main:
   252  0075                     main@adc_val:	
   253                           ; 1 bytes @ 0x5
   254                           
   255                           
   256                           ; 2 bytes @ 0x5
   257  0075                     	ds	2
   258                           
   259                           	psect	maintext
   260  07A4                     __pmaintext:	
   261 ;;
   262 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   263 ;;
   264 ;; *************** function _main *****************
   265 ;; Defined at:
   266 ;;		line 64 in file "main.c"
   267 ;; Parameters:    Size  Location     Type
   268 ;;		None
   269 ;; Auto vars:     Size  Location     Type
   270 ;;  adc_val         2    5[COMMON] int 
   271 ;; Return value:  Size  Location     Type
   272 ;;                  1    wreg      void 
   273 ;; Registers used:
   274 ;;		wreg, status,2, status,0, pclath, cstack
   275 ;; Tracked objects:
   276 ;;		On entry : B00/0
   277 ;;		On exit  : 0/0
   278 ;;		Unchanged: 0/0
   279 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   280 ;;      Params:         0       0       0       0       0
   281 ;;      Locals:         2       0       0       0       0
   282 ;;      Temps:          0       0       0       0       0
   283 ;;      Totals:         2       0       0       0       0
   284 ;;Total ram usage:        2 bytes
   285 ;; Hardware stack levels required when called:    1
   286 ;; This function calls:
   287 ;;		_PWM2_LoadDutyValue
   288 ;;		_PWM_Initialize
   289 ;;		_adc_init
   290 ;;		_read_adc
   291 ;; This function is called by:
   292 ;;		Startup code after reset
   293 ;; This function uses a non-reentrant model
   294 ;;
   295                           
   296                           
   297                           ;psect for function _main
   298  07A4                     _main:
   299  07A4                     l679:	
   300                           ;incstack = 0
   301                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   302                           
   303                           
   304                           ;main.c: 65:     int adc_val;;main.c: 67:     PWM_Initialize();
   305  07A4  120A  118A  277A  120A  118A  	fcall	_PWM_Initialize
   306                           
   307                           ;main.c: 68:     adc_init();
   308  07A9  120A  118A  2771  120A  118A  	fcall	_adc_init
   309  07AE                     l48:	
   310                           ;main.c: 70:     while(1){
   311                           
   312                           
   313                           ;main.c: 71:         adc_val = read_adc(3);
   314  07AE  3003               	movlw	3
   315  07AF  120A  118A  27C5  120A  118A  	fcall	_read_adc
   316  07B4  0871               	movf	?_read_adc+1,w
   317  07B5  00F6               	movwf	main@adc_val+1
   318  07B6  0870               	movf	?_read_adc,w
   319  07B7  00F5               	movwf	main@adc_val
   320                           
   321                           ;main.c: 72:         PWM2_LoadDutyValue(adc_val);
   322  07B8  0876               	movf	main@adc_val+1,w
   323  07B9  00F1               	movwf	PWM2_LoadDutyValue@dutyValue+1
   324  07BA  0875               	movf	main@adc_val,w
   325  07BB  00F0               	movwf	PWM2_LoadDutyValue@dutyValue
   326  07BC  120A  118A  2788  120A  118A  	fcall	_PWM2_LoadDutyValue
   327  07C1  2FAE               	goto	l48
   328  07C2  120A  118A  2800   	ljmp	start
   329  07C5                     __end_of_main:
   330                           
   331                           	psect	text1
   332  07C5                     __ptext1:	
   333 ;; *************** function _read_adc *****************
   334 ;; Defined at:
   335 ;;		line 55 in file "main.c"
   336 ;; Parameters:    Size  Location     Type
   337 ;;  ch              1    wreg     unsigned char 
   338 ;; Auto vars:     Size  Location     Type
   339 ;;  ch              1    4[COMMON] unsigned char 
   340 ;; Return value:  Size  Location     Type
   341 ;;                  2    0[COMMON] unsigned int 
   342 ;; Registers used:
   343 ;;		wreg, status,2, status,0
   344 ;; Tracked objects:
   345 ;;		On entry : 0/0
   346 ;;		On exit  : 0/0
   347 ;;		Unchanged: 0/0
   348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   349 ;;      Params:         2       0       0       0       0
   350 ;;      Locals:         1       0       0       0       0
   351 ;;      Temps:          2       0       0       0       0
   352 ;;      Totals:         5       0       0       0       0
   353 ;;Total ram usage:        5 bytes
   354 ;; Hardware stack levels used:    1
   355 ;; This function calls:
   356 ;;		Nothing
   357 ;; This function is called by:
   358 ;;		_main
   359 ;; This function uses a non-reentrant model
   360 ;;
   361                           
   362                           
   363                           ;psect for function _read_adc
   364  07C5                     _read_adc:
   365                           
   366                           ;incstack = 0
   367                           ; Regs used in _read_adc: [wreg+status,2+status,0]
   368                           ;read_adc@ch stored from wreg
   369  07C5  00F4               	movwf	read_adc@ch
   370  07C6                     l669:
   371                           
   372                           ;main.c: 56:     ADCON0 &= 0b11000101;
   373  07C6  30C5               	movlw	197
   374  07C7  00F2               	movwf	??_read_adc
   375  07C8  0872               	movf	??_read_adc,w
   376  07C9  1283               	bcf	3,5	;RP0=0, select bank0
   377  07CA  1303               	bcf	3,6	;RP1=0, select bank0
   378  07CB  059F               	andwf	31,f	;volatile
   379                           
   380                           ;main.c: 57:     ADCON0 |= ch<<3;
   381  07CC  0874               	movf	read_adc@ch,w	;volatile
   382  07CD  00F2               	movwf	??_read_adc
   383  07CE  3002               	movlw	2
   384  07CF                     u55:
   385  07CF  1003               	clrc
   386  07D0  0DF2               	rlf	??_read_adc,f
   387  07D1  3EFF               	addlw	-1
   388  07D2  1D03               	skipz
   389  07D3  2FCF               	goto	u55
   390  07D4  1003               	clrc
   391  07D5  0D72               	rlf	??_read_adc,w
   392  07D6  00F3               	movwf	??_read_adc+1
   393  07D7  0873               	movf	??_read_adc+1,w
   394  07D8  049F               	iorwf	31,f	;volatile
   395  07D9                     l671:
   396                           
   397                           ;main.c: 58:     _delay((unsigned long)((2)*(20000000/4000.0)));
   398  07D9  300D               	movlw	13
   399  07DA  00F3               	movwf	??_read_adc+1
   400  07DB  30FB               	movlw	251
   401  07DC  00F2               	movwf	??_read_adc
   402  07DD                     u77:
   403  07DD  0BF2               	decfsz	??_read_adc,f
   404  07DE  2FDD               	goto	u77
   405  07DF  0BF3               	decfsz	??_read_adc+1,f
   406  07E0  2FDD               	goto	u77
   407  07E1  2FE2               	nop2
   408  07E2                     l673:
   409                           
   410                           ;main.c: 59:     GO_nDONE = 1;
   411  07E2  1283               	bcf	3,5	;RP0=0, select bank0
   412  07E3  1303               	bcf	3,6	;RP1=0, select bank0
   413  07E4  151F               	bsf	31,2	;volatile
   414  07E5                     l40:	
   415                           ;main.c: 60:     while(GO_nDONE);
   416                           
   417  07E5  191F               	btfsc	31,2	;volatile
   418  07E6  2FE8               	goto	u61
   419  07E7  2FE9               	goto	u60
   420  07E8                     u61:
   421  07E8  2FE5               	goto	l40
   422  07E9                     u60:
   423  07E9                     l675:
   424                           
   425                           ;main.c: 61:     return ((ADRESH<<8)+ADRESL);
   426  07E9  081E               	movf	30,w	;volatile
   427  07EA  00F1               	movwf	?_read_adc+1
   428  07EB  1683               	bsf	3,5	;RP0=1, select bank1
   429  07EC  1303               	bcf	3,6	;RP1=0, select bank1
   430  07ED  081E               	movf	30,w	;volatile
   431  07EE  00F0               	movwf	?_read_adc
   432  07EF                     l43:
   433  07EF  0008               	return
   434  07F0                     __end_of_read_adc:
   435                           
   436                           	psect	text2
   437  0771                     __ptext2:	
   438 ;; *************** function _adc_init *****************
   439 ;; Defined at:
   440 ;;		line 50 in file "main.c"
   441 ;; Parameters:    Size  Location     Type
   442 ;;		None
   443 ;; Auto vars:     Size  Location     Type
   444 ;;		None
   445 ;; Return value:  Size  Location     Type
   446 ;;                  1    wreg      void 
   447 ;; Registers used:
   448 ;;		wreg
   449 ;; Tracked objects:
   450 ;;		On entry : 0/0
   451 ;;		On exit  : 0/0
   452 ;;		Unchanged: 0/0
   453 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   454 ;;      Params:         0       0       0       0       0
   455 ;;      Locals:         0       0       0       0       0
   456 ;;      Temps:          0       0       0       0       0
   457 ;;      Totals:         0       0       0       0       0
   458 ;;Total ram usage:        0 bytes
   459 ;; Hardware stack levels used:    1
   460 ;; This function calls:
   461 ;;		Nothing
   462 ;; This function is called by:
   463 ;;		_main
   464 ;; This function uses a non-reentrant model
   465 ;;
   466                           
   467                           
   468                           ;psect for function _adc_init
   469  0771                     _adc_init:
   470  0771                     l653:	
   471                           ;incstack = 0
   472                           ; Regs used in _adc_init: [wreg]
   473                           
   474                           
   475                           ;main.c: 51:     ADCON0 = 0b01000001;
   476  0771  3041               	movlw	65
   477  0772  1283               	bcf	3,5	;RP0=0, select bank0
   478  0773  1303               	bcf	3,6	;RP1=0, select bank0
   479  0774  009F               	movwf	31	;volatile
   480                           
   481                           ;main.c: 52:     ADCON1 = 0b11000000;
   482  0775  30C0               	movlw	192
   483  0776  1683               	bsf	3,5	;RP0=1, select bank1
   484  0777  1303               	bcf	3,6	;RP1=0, select bank1
   485  0778  009F               	movwf	31	;volatile
   486  0779                     l37:
   487  0779  0008               	return
   488  077A                     __end_of_adc_init:
   489                           
   490                           	psect	text3
   491  077A                     __ptext3:	
   492 ;; *************** function _PWM_Initialize *****************
   493 ;; Defined at:
   494 ;;		line 33 in file "main.c"
   495 ;; Parameters:    Size  Location     Type
   496 ;;		None
   497 ;; Auto vars:     Size  Location     Type
   498 ;;		None
   499 ;; Return value:  Size  Location     Type
   500 ;;                  1    wreg      void 
   501 ;; Registers used:
   502 ;;		wreg
   503 ;; Tracked objects:
   504 ;;		On entry : 0/0
   505 ;;		On exit  : 0/0
   506 ;;		Unchanged: 0/0
   507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   508 ;;      Params:         0       0       0       0       0
   509 ;;      Locals:         0       0       0       0       0
   510 ;;      Temps:          0       0       0       0       0
   511 ;;      Totals:         0       0       0       0       0
   512 ;;Total ram usage:        0 bytes
   513 ;; Hardware stack levels used:    1
   514 ;; This function calls:
   515 ;;		Nothing
   516 ;; This function is called by:
   517 ;;		_main
   518 ;; This function uses a non-reentrant model
   519 ;;
   520                           
   521                           
   522                           ;psect for function _PWM_Initialize
   523  077A                     _PWM_Initialize:
   524  077A                     l643:	
   525                           ;incstack = 0
   526                           ; Regs used in _PWM_Initialize: [wreg]
   527                           
   528                           
   529                           ;main.c: 35:     PR2 = 0.001/(0.0000002 * 4 * 6);
   530  077A  30D0               	movlw	208
   531  077B  1683               	bsf	3,5	;RP0=1, select bank1
   532  077C  1303               	bcf	3,6	;RP1=0, select bank1
   533  077D  0092               	movwf	18	;volatile
   534  077E                     l645:
   535                           
   536                           ;main.c: 36:     CCP1M3 = 1; CCP1M2 = 1;
   537  077E  1283               	bcf	3,5	;RP0=0, select bank0
   538  077F  1303               	bcf	3,6	;RP1=0, select bank0
   539  0780  1597               	bsf	23,3	;volatile
   540  0781                     l647:
   541  0781  1517               	bsf	23,2	;volatile
   542                           
   543                           ;main.c: 37:     T2CON = 0b00101101;
   544  0782  302D               	movlw	45
   545  0783  0092               	movwf	18	;volatile
   546  0784                     l649:
   547                           
   548                           ;main.c: 38:     TRISCbits.TRISC2 = 0;
   549  0784  1683               	bsf	3,5	;RP0=1, select bank1
   550  0785  1303               	bcf	3,6	;RP1=0, select bank1
   551  0786  1107               	bcf	7,2	;volatile
   552  0787                     l31:
   553  0787  0008               	return
   554  0788                     __end_of_PWM_Initialize:
   555                           
   556                           	psect	text4
   557  0788                     __ptext4:	
   558 ;; *************** function _PWM2_LoadDutyValue *****************
   559 ;; Defined at:
   560 ;;		line 41 in file "main.c"
   561 ;; Parameters:    Size  Location     Type
   562 ;;  dutyValue       2    0[COMMON] unsigned int 
   563 ;; Auto vars:     Size  Location     Type
   564 ;;		None
   565 ;; Return value:  Size  Location     Type
   566 ;;                  1    wreg      void 
   567 ;; Registers used:
   568 ;;		wreg, status,2, status,0
   569 ;; Tracked objects:
   570 ;;		On entry : 0/0
   571 ;;		On exit  : 0/0
   572 ;;		Unchanged: 0/0
   573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   574 ;;      Params:         2       0       0       0       0
   575 ;;      Locals:         0       0       0       0       0
   576 ;;      Temps:          2       0       0       0       0
   577 ;;      Totals:         4       0       0       0       0
   578 ;;Total ram usage:        4 bytes
   579 ;; Hardware stack levels used:    1
   580 ;; This function calls:
   581 ;;		Nothing
   582 ;; This function is called by:
   583 ;;		_main
   584 ;; This function uses a non-reentrant model
   585 ;;
   586                           
   587                           
   588                           ;psect for function _PWM2_LoadDutyValue
   589  0788                     _PWM2_LoadDutyValue:
   590  0788                     l667:	
   591                           ;incstack = 0
   592                           ; Regs used in _PWM2_LoadDutyValue: [wreg+status,2+status,0]
   593                           
   594                           
   595                           ;main.c: 41: void PWM2_LoadDutyValue(uint16_t dutyValue);main.c: 42: {;main.c: 44:     C
      +                          CPR1L = ((dutyValue & 0x03FC)>>2);
   596  0788  0871               	movf	PWM2_LoadDutyValue@dutyValue+1,w
   597  0789  00F3               	movwf	??_PWM2_LoadDutyValue+1
   598  078A  0870               	movf	PWM2_LoadDutyValue@dutyValue,w
   599  078B  00F2               	movwf	??_PWM2_LoadDutyValue
   600  078C  1003               	clrc
   601  078D  0CF3               	rrf	??_PWM2_LoadDutyValue+1,f
   602  078E  0CF2               	rrf	??_PWM2_LoadDutyValue,f
   603  078F  1003               	clrc
   604  0790  0CF3               	rrf	??_PWM2_LoadDutyValue+1,f
   605  0791  0CF2               	rrf	??_PWM2_LoadDutyValue,f
   606  0792  0872               	movf	??_PWM2_LoadDutyValue,w
   607  0793  1283               	bcf	3,5	;RP0=0, select bank0
   608  0794  1303               	bcf	3,6	;RP1=0, select bank0
   609  0795  0095               	movwf	21	;volatile
   610                           
   611                           ;main.c: 47:     CCP1CON = ((uint8_t)(CCP1CON & 0xCF) | ((dutyValue & 0x0003)<<4));
   612  0796  0870               	movf	PWM2_LoadDutyValue@dutyValue,w
   613  0797  3903               	andlw	3
   614  0798  00F2               	movwf	??_PWM2_LoadDutyValue
   615  0799  3004               	movlw	4
   616  079A                     u45:
   617  079A  1003               	clrc
   618  079B  0DF2               	rlf	??_PWM2_LoadDutyValue,f
   619  079C  3EFF               	addlw	-1
   620  079D  1D03               	skipz
   621  079E  2F9A               	goto	u45
   622  079F  0817               	movf	23,w	;volatile
   623  07A0  39CF               	andlw	207
   624  07A1  0472               	iorwf	??_PWM2_LoadDutyValue,w
   625  07A2  0097               	movwf	23	;volatile
   626  07A3                     l34:
   627  07A3  0008               	return
   628  07A4                     __end_of_PWM2_LoadDutyValue:
   629  007E                     btemp	set	126	;btemp
   630  007E                     wtemp0	set	126
   631                           
   632                           	psect	config
   633                           
   634                           ;Config register CONFIG @ 0x2007
   635                           ;	Oscillator Selection bits
   636                           ;	FOSC = HS, HS oscillator
   637                           ;	Watchdog Timer Enable bit
   638                           ;	WDTE = OFF, WDT disabled
   639                           ;	Power-up Timer Enable bit
   640                           ;	PWRTE = ON, PWRT enabled
   641                           ;	Brown-out Reset Enable bit
   642                           ;	BOREN = OFF, BOR disabled
   643                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
   644                           ;	LVP = ON, RB3/PGM pin has PGM function; low-voltage programming enabled
   645                           ;	Data EEPROM Memory Code Protection bit
   646                           ;	CPD = OFF, Data EEPROM code protection off
   647                           ;	Flash Program Memory Write Enable bits
   648                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
   649                           ;	In-Circuit Debugger Mode bit
   650                           ;	DEBUG = 0x1, unprogrammed default
   651                           ;	Flash Program Memory Code Protection bit
   652                           ;	CP = OFF, Code protection off
   653  2007                     	org	8199
   654  2007  3FB2               	dw	16306

Data Sizes:
    Strings     0
    Constant    0
    Data        2
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7       9
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_read_adc

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0     165
                                              5 COMMON     2     2      0
                 _PWM2_LoadDutyValue
                     _PWM_Initialize
                           _adc_init
                           _read_adc
 ---------------------------------------------------------------------------------
 (1) _read_adc                                             5     3      2      22
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (1) _adc_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM2_LoadDutyValue                                   4     2      2     120
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _PWM2_LoadDutyValue
   _PWM_Initialize
   _adc_init
   _read_adc

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      0       0       5        0.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      7       9       1       64.3%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0       9      12        0.0%
ABS                  0      0       9       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Mon Dec 14 19:31:48 2020

    __size_of_PWM_Initialize 000E                           l31 0787                           l40 07E5  
                         l34 07A3                           l43 07EF                           l37 0779  
                         l48 07AE                           u60 07E9                           u45 079A  
                         u61 07E8                           u55 07CF                           u77 07DD  
                        l643 077A                          l645 077E                          l653 0771  
                        l647 0781                          l671 07D9                          l649 0784  
                        l673 07E2                          l667 0788                          l675 07E9  
                        l669 07C6                          l679 07A4                          _PR2 0092  
                main@adc_val 0075                         _main 07A4                         btemp 007E  
                       start 0000                        ?_main 0070                        _T2CON 0012  
                      status 0003                        wtemp0 007E              __initialization 07F0  
               __end_of_main 07C5                       ??_main 0075                       _ADCON0 001F  
                     _ADCON1 009F                       _CCP1M2 00BA                       _CCP1M3 00BB  
                     _ADRESH 001E                       _ADRESL 009E                       _CCPR1L 0015  
           __end_of_adc_init 077A               _PWM_Initialize 077A             __end_of_read_adc 07F0  
               __pdataCOMMON 0077      __end_of__initialization 07FC   __end_of_PWM2_LoadDutyValue 07A4  
     __end_of_PWM_Initialize 0788               __pcstackCOMMON 0070              ?_PWM_Initialize 0070  
                 __pmaintext 07A4                      _CCP1CON 0017                    ?_adc_init 0070  
                  ?_read_adc 0070                   ??_adc_init 0070                      __ptext1 07C5  
                    __ptext2 0771                      __ptext3 077A                      __ptext4 0788  
       end_of_initialization 07FC                   ??_read_adc 0072                    _TRISCbits 0087  
              __pidataCOMMON 076F           _PWM2_LoadDutyValue 0788          start_initialization 07F0  
        ?_PWM2_LoadDutyValue 0070             ??_PWM_Initialize 0070         ??_PWM2_LoadDutyValue 0072  
PWM2_LoadDutyValue@dutyValue 0070                   read_adc@ch 0074            __size_of_adc_init 0009  
                  ___latbits 0002            __size_of_read_adc 002B                     _GO_nDONE 00FA  
                   _PWM_freq 0077                     _adc_init 0771                     _read_adc 07C5  
              __size_of_main 0021  __size_of_PWM2_LoadDutyValue 001C  
